[{"/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/index.tsx":"1","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/App.tsx":"2","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Views/Homeview.tsx":"3","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Utils/helpers.ts":"4","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Components/Grid.tsx":"5","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Utils/consts.ts":"6","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Components/Tile.tsx":"7","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Utils/useInterval.ts":"8","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Utils/useWasm.ts":"9"},{"size":433,"mtime":1668348048213,"results":"10","hashOfConfig":"11"},{"size":331,"mtime":1668377172216,"results":"12","hashOfConfig":"11"},{"size":4123,"mtime":1668377270053,"results":"13","hashOfConfig":"11"},{"size":3426,"mtime":1668373855850,"results":"14","hashOfConfig":"11"},{"size":1460,"mtime":1668373241925,"results":"15","hashOfConfig":"11"},{"size":441,"mtime":1668373068471,"results":"16","hashOfConfig":"11"},{"size":503,"mtime":1668373251781,"results":"17","hashOfConfig":"11"},{"size":570,"mtime":1668370849970,"results":"18","hashOfConfig":"11"},{"size":473,"mtime":1668377094909,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"qwub88",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/index.tsx",[],[],"/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/App.tsx",[],"/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Views/Homeview.tsx",["45"],"import React, {useEffect, useState} from 'react';\nimport {\n  FILL_PERCENT,\n  MAX_NEIGHBOURS_DISPOSITION,\n  FRAME_RATE,\n  CANVAS_LAYOUT,\n  NGH_LAYOUT,\n} from 'src/Utils/consts';\nimport {\n  generateGrid,\n  applyRule,\n  toggleCell,\n  randomPower,\n  computeNeighborRule,\n} from 'src/Utils/helpers';\nimport {useInterval} from 'src/Utils/useInterval';\nimport {Grid} from '../Components/Grid';\nimport './Homeview.css';\nimport {add} from 'breath';\n\nexport const Homeview: React.FC = () => {\n  const [rule, setRule] = useState(randomPower(MAX_NEIGHBOURS_DISPOSITION));\n  const [fillPercent, setFillPercent] = useState(FILL_PERCENT);\n  const [grid, setGrid] = useState(generateGrid(fillPercent));\n  const [nghGrid, setNghGrid] = useState(generateGrid(0, 3, 3));\n  const [nghRule, setNghRule] = useState(186);\n\n  useEffect(() => {\n    setNghRule(computeNeighborRule(nghGrid));\n  }, [nghGrid]);\n\n  const applyRuleGrid = () => {\n    setGrid(applyRule(rule, nghRule));\n  };\n\n  /* Animation */\n  const [running, setRunning] = useState(false);\n  const [frameRate, setFrameRate] = useState(FRAME_RATE);\n  useInterval(\n    () => {\n      applyRuleGrid();\n    },\n    running ? Math.floor(1000 / FRAME_RATE) : null,\n  );\n\n  const handleFrameRateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const input = parseInt(e.target.value);\n    if (isNaN(input) || input < 0 || input > 120) {\n      setFrameRate(FRAME_RATE);\n    } else {\n      setFrameRate(input);\n    }\n  };\n  /* Input */\n\n  const handleRuleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const input = parseInt(e.target.value);\n    if (isNaN(input) || input < 0 || input > Math.pow(2, 10) - 1) {\n      setRule(0);\n    } else {\n      setRule(input);\n    }\n  };\n  /*\n  const _handleFillPercentInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const input = parseFloat(e.target.value);\n    if (isNaN(input)) {\n      setFillPercent(FILL_PERCENT);\n    } else {\n      setFillPercent(input);\n    }\n  };\n  */\n  const generateNewRule = () => {\n    setRule(randomPower(MAX_NEIGHBOURS_DISPOSITION));\n  };\n\n  return (\n    <div className=\"homeview-container\">\n      <h2>Cellular Automaton Viz</h2>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}>\n        <label>\n          Rule :\n          <input\n            type=\"text\"\n            name=\"rule\"\n            value={rule}\n            onChange={handleRuleInputChange}\n            disabled={running}\n          />\n        </label>\n        <button onClick={generateNewRule} disabled={running}>\n          Generate new Rule\n        </button>\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}>\n        <button onClick={() => setGrid(generateGrid(fillPercent)())}>\n          Generate new grid\n        </button>\n        <button onClick={() => setGrid(generateGrid(0)())}>Empty grid</button>\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          marginBottom: '30px',\n        }}>\n        <label>\n          Framerate :{' '}\n          <input\n            type=\"number\"\n            name=\"Frame Rate\"\n            min=\"1\"\n            max=\"120\"\n            value={frameRate}\n            onChange={handleFrameRateChange}\n          />\n        </label>\n      </div>\n      <h3>Neighbors:{'\\n '}</h3>\n      Neighbor Rule: {nghRule}\n      <Grid\n        grid={nghGrid}\n        toggle={toggleCell(nghGrid, running, setNghGrid)}\n        layout={NGH_LAYOUT}\n      />\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}>\n        <button onClick={applyRuleGrid} disabled={running}>\n          Apply rule manually\n        </button>\n        <button\n          onClick={() => {\n            setRunning(!running);\n          }}>\n          {running ? 'Stop' : 'Apply rule automatically'}\n        </button>\n      </div>\n      <h3>Automata: </h3>\n      Rule : {rule.toString(2)}\n      {add(3, 4)}\n      <Grid\n        grid={grid}\n        toggle={toggleCell(grid, running, setGrid)}\n        layout={CANVAS_LAYOUT}\n      />\n    </div>\n  );\n};\n","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Utils/helpers.ts",["46","47","48","49","50"],"import {CANVAS_LAYOUT, FILL_PERCENT} from '../Utils/consts';\nimport {Cell} from '../types/tileData';\n\nexport const generateGrid =\n  (\n    fillPercent: number = FILL_PERCENT,\n    numCol: number = CANVAS_LAYOUT.NUM_COL,\n    numRow: number = CANVAS_LAYOUT.NUM_ROW,\n  ) =>\n  (): Cell[][] => {\n    const newData = Array(numRow)\n      .fill(null)\n      .map((_row) => {\n        return Array(numCol)\n          .fill(null)\n          .map((_cell): Cell => {\n            return {content: Math.random() < fillPercent ? 1 : 0};\n          });\n      });\n    return newData;\n  };\n\nconst flipCell = (oldCell: Cell): Cell => {\n  // 0 ^ 1 = 1 ; 1 ^ 1 = 0\n  const content = (oldCell.content ^ 1) as 0 | 1;\n\n  return {\n    content,\n  };\n};\n\nexport const toggleCell =\n  (grid: Cell[][], running: boolean, setGrid: (grid: Cell[][]) => void) =>\n  (replacedI: number, replacedJ: number) =>\n  (): void => {\n    if (running) {\n      return;\n    }\n    const newGrid = grid.map((row, i) => {\n      if (i !== replacedI) {\n        return row;\n      }\n      return row.map((cell, j) => {\n        if (j !== replacedJ) {\n          return cell;\n        }\n        return flipCell(cell);\n      });\n    });\n    setGrid(newGrid);\n  };\n\n/*\n *\n *  0 1 0\n *  1 1 1  : 010 111 010 => 186 : neighborRule , so neighborRule < 2^9 - 1\n *  0 1 0\n *\n */\n\nconst getNeighbors = (i: number, j: number) => {\n  return [\n    [i + 1, j + 1],\n    [i + 1, j],\n    [i + 1, j - 1],\n    [i, j + 1],\n    [i, j],\n    [i, j - 1],\n    [i - 1, j + 1],\n    [i - 1, j],\n    [i - 1, j - 1],\n  ];\n};\n\nconst computeCellCode =\n  (neighborRule: number) =>\n  (grid: Cell[][]) =>\n  (i: number, j: number): number => {\n    const neighbors = getNeighbors(i, j);\n    const cellCode: number = neighbors.reduce((prv, [nghI, nghJ], k) => {\n      if (\n        nghI < 0 ||\n        nghJ < 0 ||\n        nghI >= CANVAS_LAYOUT.NUM_COL ||\n        nghJ >= CANVAS_LAYOUT.NUM_ROW\n      ) {\n        // if it's out of bounds it's considered as dead, no wrap-around\n        return prv;\n      }\n      // const isNghRelevant = ruleBitwise(neighborRule, k);\n      return prv + grid[nghI][nghJ].content; // * isNghRelevant;\n    }, 0);\n    return cellCode;\n  };\n\nconst ruleBitwise = (rule: number, power: number): 0 | 1 => {\n  return (Math.pow(2, power) & rule) === 0 ? 0 : 1;\n};\n\nexport const randomPower = (bits: number): number => {\n  return Math.floor(Math.random() * (Math.pow(2, bits) - 1));\n};\n\nexport const computeNeighborRule = (neighborGrid: Cell[][]) => {\n  const neighbors = getNeighbors(1, 1);\n  const neighborRule: number = neighbors.reduce((prv, [nghI, nghJ], k) => {\n    return prv + neighborGrid[nghI][nghJ].content * Math.pow(2, k);\n  }, 0);\n  return neighborRule;\n};\n\n/*\n *  000\n *  000 : code = 1\n *  001\n *\n */\n\n/*\n *\n *  0000000010 : if you have 1 neighbor : you live/stay alive, else rip , la rule : 2\n *\n *\n */\n\nexport const applyRule =\n  (rule: number, neighborRule = 186) =>\n  (grid: Cell[][]): Cell[][] => {\n    /*\n  0 1 0\n  0 1 1 : CellCode 3 ( if nghbourRule = 186 )\n  0 0 0\n  rule : 000 001 000 =\n  So first thing, we iterate through the cells to get their code\n  Then we check the corresponding bit in the rule\n  */\n    return grid.map((row, i) => {\n      return row.map((_cell, j) => {\n        const cellCode = computeCellCode(neighborRule)(grid)(i, j);\n        const newCell: Cell = {\n          content: ruleBitwise(rule, cellCode),\n        };\n        return newCell;\n      });\n    });\n  };\n","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Components/Grid.tsx",[],"/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Utils/consts.ts",["51","52","53"],"export const FRAME_RATE = 30;\n\nexport const CANVAS_LAYOUT = {\n  WIDTH: 800,\n  HEIGHT: 800,\n  NUM_COL: 80,\n  NUM_ROW: 80,\n};\n\nexport const NGH_LAYOUT = {\n  WIDTH: 100,\n  HEIGHT: 100,\n  NUM_COL: 3,\n  NUM_ROW: 3,\n};\n\nexport const CELL_LAYOUT = (layout: any) => ({\n  CELL_HEIGHT: layout.HEIGHT / layout.NUM_COL,\n  CELL_WIDTH: layout.WIDTH / layout.NUM_ROW,\n});\nexport const MAX_NEIGHBOURS_DISPOSITION = 10; // 2\nexport const FILL_PERCENT = 0.5;\n","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Components/Tile.tsx",["54"],"import React from 'react';\nimport {CELL_LAYOUT} from '../Utils/consts';\nimport './Tile.css';\n\ntype Props = {\n  layout: any;\n  backgroundColor: 'white' | 'black' | 'red';\n  onClick: () => void;\n};\n\nexport const Tile: React.FC<Props> = ({layout, backgroundColor, onClick}) => {\n  return (\n    <div\n      className=\"tile\"\n      onClick={onClick}\n      style={{\n        width: CELL_LAYOUT(layout).CELL_WIDTH,\n        height: CELL_LAYOUT(layout).CELL_HEIGHT,\n        backgroundColor,\n      }}\n    />\n  );\n};\n","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Utils/useInterval.ts",["55","56","57","58"],"import React, {useState, useEffect, useRef} from 'react';\n\nexport const useInterval = <T extends (...args: any[]) => void>(\n  callback: T,\n  delay: number | null,\n) => {\n  const savedCallback = useRef<T>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current?.();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    return;\n  }, [delay]);\n};\n","/Users/achraflaamoum/Documents/project/cellular-automaton-viz/src/Utils/useWasm.ts",["59"],"import init from 'breath';\n\nimport {useEffect, useState} from 'react';\n\nexport const useWasm = () => {\n  const [error, setError] = useState<unknown>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchWasm = async () => {\n      try {\n        await init();\n      } catch (err: unknown) {\n        setError(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchWasm();\n  }, []);\n  return {error, isLoading};\n};\n",{"ruleId":"60","severity":1,"message":"61","line":23,"column":23,"nodeType":"62","messageId":"63","endLine":23,"endColumn":37},{"ruleId":"60","severity":1,"message":"64","line":13,"column":13,"nodeType":"62","messageId":"63","endLine":13,"endColumn":17},{"ruleId":"60","severity":1,"message":"65","line":16,"column":17,"nodeType":"62","messageId":"63","endLine":16,"endColumn":22},{"ruleId":"60","severity":1,"message":"66","line":76,"column":4,"nodeType":"62","messageId":"63","endLine":76,"endColumn":24},{"ruleId":"60","severity":1,"message":"67","line":80,"column":67,"nodeType":"62","messageId":"63","endLine":80,"endColumn":68},{"ruleId":"68","severity":1,"message":"69","line":104,"column":36,"nodeType":"70","messageId":"71","endLine":104,"endColumn":63},{"ruleId":"68","severity":1,"message":"69","line":17,"column":28,"nodeType":"70","messageId":"71","endLine":17,"endColumn":44},{"ruleId":"68","severity":1,"message":"72","line":17,"column":29,"nodeType":"62","messageId":"73","endLine":17,"endColumn":40},{"ruleId":"74","severity":1,"message":"75","line":17,"column":37,"nodeType":"76","messageId":"77","endLine":17,"endColumn":40,"suggestions":"78"},{"ruleId":"74","severity":1,"message":"75","line":6,"column":11,"nodeType":"76","messageId":"77","endLine":6,"endColumn":14,"suggestions":"79"},{"ruleId":"60","severity":1,"message":"80","line":1,"column":8,"nodeType":"62","messageId":"63","endLine":1,"endColumn":13},{"ruleId":"60","severity":1,"message":"81","line":1,"column":16,"nodeType":"62","messageId":"63","endLine":1,"endColumn":24},{"ruleId":"68","severity":1,"message":"69","line":3,"column":28,"nodeType":"70","messageId":"71","endLine":6,"endColumn":5},{"ruleId":"74","severity":1,"message":"75","line":3,"column":49,"nodeType":"76","messageId":"77","endLine":3,"endColumn":52,"suggestions":"82"},{"ruleId":"68","severity":1,"message":"69","line":5,"column":24,"nodeType":"70","messageId":"71","endLine":5,"endColumn":29},"@typescript-eslint/no-unused-vars","'setFillPercent' is assigned a value but never used.","Identifier","unusedVar","'_row' is defined but never used.","'_cell' is defined but never used.","'neighborRule' is defined but never used.","'k' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'layout' should be typed with a non-any type.","anyTypedArg","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["83","84"],["85","86"],"'React' is defined but never used.","'useState' is defined but never used.",["87","88"],{"messageId":"89","fix":"90","desc":"91"},{"messageId":"92","fix":"93","desc":"94"},{"messageId":"89","fix":"95","desc":"91"},{"messageId":"92","fix":"96","desc":"94"},{"messageId":"89","fix":"97","desc":"91"},{"messageId":"92","fix":"98","desc":"94"},"suggestUnknown",{"range":"99","text":"100"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"99","text":"101"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"102","text":"100"},{"range":"102","text":"101"},{"range":"103","text":"100"},{"range":"103","text":"101"},[250,253],"unknown","never",[119,122],[107,110]]